name: Build and Deploy

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: birgirst-github-actions-eval

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build-and-publish-container-image:
    # Ensure test job passes before pushing image.
    needs: test

  # Map a step output to a job output
    outputs:
      image: ${{ steps.pushimg.outputs.image }}

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        id: pushimg
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          echo "::set-output name=image::$IMAGE_ID:$VERSION"

  deploy-dev:
    needs: build-and-publish-container-image
    name: deploy to df-sandbox-1 / sandbox-dev
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Generate application manifest
      id: generate-manifest-dev
      uses: addnab/docker-run-action@v3
      with:
        image: birgirst/fiaas-mast:latest
        shell: sh
        options: -v ${{ github.workspace }}:/work:rw
        run: |
          echo ${{needs.push.outputs.image}}
          apk add jq
          fiaas-mast --appspec /work/paas.yaml --application-name myapp --namespace sandbox-dev --image ${{needs.build-and-publish-container-image.outputs.image}} > output.json
          cat output.json | jq .application > /work/myapplication.json
          cat output.json | jq .deployment_id | sed 's/\"//g' > /work/deployment_id
          cat /work/myapplication.json
          cat /work/deployment_id
          echo "::set-output name=deployment-id::$(cat deployment_id)\n"

    - name: deploy to df-sandbox-1/dev
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_DF_SANDBOX_1 }}
      with:
        args: apply -f myapplication.json -nsandbox-dev

    - name: Check Deployment Status DEV
      run: |
        DEPLOYMENT_ID=$(cat deployment_id)
        STATUS_URL="https://fiaas-mast.df-sandbox-1.eks.schibsted.io/status/sandbox-dev/birgir-github-actions-fiaas/${DEPLOYMENT_ID}/"
        echo ${STATUS_URL}
        n=1
        until [ $n -ge 30 ]
        do
          echo Attempt: ${n}
          RESULT=$(curl -s ${STATUS_URL} | jq -r ".status")
          echo ${RESULT}
          if [ $RESULT == "SUCCESS" ];then
            echo "success"
            exit 0
          fi
          ((n++))
          echo "still waiting on success"
          sleep 10
        done
        exit 1

    - name: check application status df-sandbox-1/dev
      uses: birgirst/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_DF_SANDBOX_1 }}
      with:
        args: get applicationstatus -lfiaas/deployment_id=${{steps.generate-manifest-dev.outputs.deployment-id}} -ojson -nsandbox-dev | jq '.items | .[] | .result' | sed 's/\"//g'

    - name: check application status df-sandbox-1/dev
      uses: birgirst/fiaas-status@main
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_DF_SANDBOX_1 }}
      with:
        args: ${{steps.generate-manifest-dev.outputs.deployment-id}} -nsandbox-dev

  deploy-pre:
    needs: [build-and-publish-container-image, deploy-dev]
    name: deploy to df-sandbox-1 / sandbox-pre
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Generate application manifest
      uses: addnab/docker-run-action@v3
      with:
        image: birgirst/fiaas-mast:latest
        shell: sh
        options: -v ${{ github.workspace }}:/work:rw
        run: |
          echo ${{needs.push.outputs.image}}
          apk add jq
          fiaas-mast --appspec /work/paas.yaml --application-name myapp --namespace sandbox-pre --image ${{needs.build-and-publish-container-image.outputs.image}} > output.json
          cat output.json | jq .application > /work/myapplication.json
          cat output.json | jq .deployment_id | sed 's/\"//g' > /work/deployment_id
          cat /work/myapplication.json
          cat /work/deployment_id

    - name: deploy to df-sandbox-1/pre
      uses: birgirst/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_DF_SANDBOX_1 }}
      with:
        args: apply -f myapplication.json -nsandbox-pre

    - name: Check Deployment Status PRE
      run: |
        DEPLOYMENT_ID=$(cat deployment_id)
        STATUS_URL="https://fiaas-mast.df-sandbox-1.eks.schibsted.io/status/sandbox-pre/birgir-github-actions-fiaas/${DEPLOYMENT_ID}/"
        echo ${STATUS_URL}
        n=1
        until [ $n -ge 30 ]
        do
          echo Attempt: ${n}
          RESULT=$(curl -s ${STATUS_URL} | jq -r ".status")
          echo ${RESULT}
          if [ $RESULT == "SUCCESS" ];then
            echo "success"
            exit 0
          fi
          ((n++))
          echo "still waiting on success"
          sleep 10
        done
        exit 1

  deploy-pro:
    needs: [build-and-publish-container-image, deploy-dev, deploy-pre]
    name: deploy to df-sandbox-1 / sandbox-pro
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Generate application manifest
      uses: addnab/docker-run-action@v3
      with:
        image: birgirst/fiaas-mast:latest
        shell: sh
        options: -v ${{ github.workspace }}:/work:rw
        run: |
          echo ${{needs.push.outputs.image}}
          apk add jq
          fiaas-mast --appspec /work/paas.yaml --application-name myapp --namespace sandbox-pro --image ${{needs.build-and-publish-container-image.outputs.image}} > output.json
          cat output.json | jq .application > /work/myapplication.json
          cat output.json | jq .deployment_id | sed 's/\"//g' > /work/deployment_id
          cat /work/myapplication.json
          cat /work/deployment_id

    - name: deploy to df-sandbox-1/pro
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_DF_SANDBOX_1 }}
      with:
        args: apply -f myapplication.json -nsandbox-pro

    - name: Check Deployment Status DEV
      run: |
        DEPLOYMENT_ID=$(cat deployment_id)
        STATUS_URL="https://fiaas-mast.df-sandbox-1.eks.schibsted.io/status/sandbox-pro/birgir-github-actions-fiaas/${DEPLOYMENT_ID}/"
        echo ${STATUS_URL}
        n=1
        until [ $n -ge 30 ]
        do
          echo Attempt: ${n}
          RESULT=$(curl -s ${STATUS_URL} | jq -r ".status")
          echo ${RESULT}
          if [ $RESULT == "SUCCESS" ];then
            echo "success"
            exit 0
          fi
          ((n++))
          echo "still waiting on success"
          sleep 10
        done
        exit 1
